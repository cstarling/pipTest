/** @file DCM_Types.idl
 * File containing common types to be used in muliple idl files.
 * <B>Disclaimer:</B>
 *
 * Scientific-Atlanta, a Cisco Company Proprietary & Confidential Information.
 * Information in this document or any information it refers to shall not be disclosed or be made available in any form.
 * Information in this document or any information it refers to is provided "as is", without warranties or entitlement for support of other activities of any kind.
 * Information in this document and the %DCM interface it describes is subject to change at the sole discretion of Scientific-Atlanta, a Cisco Company. 
 * Information in this document and the %DCM interface it describes can change at any time and no compatibility between releases is guaranteed.
 *
 * &copy; Copyright 2007 by Scientific-Atlanta, a Cisco Company. All rights reserved.
 *
 * @htmlonly
 * @see <a href="http://sabekorlnx02/cgi-bin/cvsweb.cgi/Projects/DCM_IDL/DCM_Types.idl"> CVS History </a>
 * @endhtmlonly
 * @latexonly
 * @newpage
 * @endlatexonly 
 */
  
 
/** @defgroup except General exceptions
 * MAX string length = 20
 * @warning For each IDL operation the last 4 exceptions must be mentioned.
 * @{
 */

#ifndef DCM_TypesIncluded
#define DCM_TypesIncluded

/** @addtogroup conf
 * @{
 * The types a board can be.
 * @version Release 1.0
 */
enum eBoardType
{
  BoardType_GbE,            ///< It's a Gigabit Ethernet board.
  BoardType_ASI             ///< It's an ASIboard.
};

/** The types a board can be.
 * @version Release 6.9
 */

enum eBoardType_V2
{
  BoardType_V2_GbE,            ///< It's a Gigabit Ethernet board.
  BoardType_V2_ASI,            ///< It's an ASIboard.
  BoardType_V2_IP_AdapterVideo,///< It's an IP Adapter Video board.
  BoardType_V2_ASI_SFN,        ///< It's an ASI SFN board, supported from release V6.9.
  BoardType_V2_TC,             ///< It's a Transcoder board.
  BoardType_V2_GbE_GW,          ///< It's a Gigabit Ethernet board, used in IP Gateway.
  BoardType_V2_ASI_GW,          ///< It's an ASIboard, used in IP Gateway.
  BoardType_V2_9036_VSE_APP,    ///< It is the D9036 VSE application running as a virtual board
  BoardType_V2_9036_MIO,        ///< It's an IO board in the D9036.
  BoardType_V2_9036_MVI,       ///< It's a D9036 Video Input Card.
  BoardType_V2_9036_MVC,       ///< It's a D9036 Video Codec Card.
  BoardType_V2_9036_MVA,       ///< It's a D9036 Audio Codec Card.
  BoardType_V2_DRD_VSB,        ///< It's a DRD 8VSB board.
  BoardType_V2_MFP,            ///< It's an MFP board.
  BoardType_V2_SFN_MKII,       ///< It's an SFN MkII board
  BoardType_V2_DRD_DVBS2,      ///< It's a DRD DVB S2 board.
  BoardType_V2_9036_PCA,       ///< It's a PCAM board.
  BoardType_V2_IP_AdapterAudio,///< It's a DRD IP Adapter Audio board.
  BoardType_V2_DGIO10_IN,      ///< It's a DGIO-10 input board, supported from release V13.0
  BoardType_V2_DGIO10_OUT,     ///< It's a DGIO-10 output board, supported from release V13.0
  ReservedBoardType_V2_21,     ///< Reserved for future use.
  ReservedBoardType_V2_22,     ///< Reserved for future use.
  ReservedBoardType_V2_23,     ///< Reserved for future use.
  ReservedBoardType_V2_24,     ///< Reserved for future use.
  ReservedBoardType_V2_25,     ///< Reserved for future use.
  ReservedBoardType_V2_26,     ///< Reserved for future use.
  ReservedBoardType_V2_27,     ///< Reserved for future use.
  ReservedBoardType_V2_28,     ///< Reserved for future use.
  ReservedBoardType_V2_29,     ///< Reserved for future use.
  ReservedBoardType_V2_Unknown ///< Reserved for future use.
};

/// @}

// PSIG
//-------------------------------------------------------------------------------------

/// PSIG type
enum ePsigType
{
  SaPsig,                     ///< SA specific PSIG (= ROSA SI Distributor) (default value)
  CaVendorPsig                ///< external CA vendor PSIG
};

module DCM
{
/** Triggered when the maximum number of clients is reached.
 * This can only happen at logon.
 */
exception MaxClientsReached { };

/** Triggered when a timeout occurs on a method.
 * This happens when no answer can be sent in time e.g. due to an IO board that is not responding.
 */
exception TimeOut { };

/** Triggered when a parameter value is out of range.
 * This may only be generated by general framework IDL methods and not by %DCM specific ones. 
 */
exception OutOfRange { };

/** Triggered when a parameter value (identifier) is invalid/unknown.
 * This may only be generated by general framework IDL methods and not by %DCM specific ones.
 */
exception InvalidSelection { };

/** Triggered when during execution of the method, some failure is detected.
 * This one replaces the older InvalidSelection, OutOfRange, NoSuchMessage and NoSuchMeasurement exceptions. 
 * The exception is generated when an IDL call fails due to another reason than the ones mentioned above.
 * This is a general exception. All methods can throw it. You will not find extra documntation about this excepion
 * in the documentation of the methods. <br>
 * When there will be time available some methods will return extra explanaitions about what went wrong etc. 
 * 
 */
exception OpNotSucceeded { };   

/** Triggered when an operation is not allowed at a particular time.
 * This happens when you have no rights (e.g. due to licenses) or when you are not logged on yet 
 * (later maybe security).
 * This is a general exception. All methods can throw it. You will not find extra documntation about this excepion
 * in the documentation of the methods.
 */
exception OpNotAllowed { };

/** Triggered when an operation is not supported.
 * This happens when the command is not in the supported IDL set (can e.g. be trying to do an ASI 
 * setting on GBE, ...)
 *
 */
exception OpNotSupported { };

/** Triggered when a license request fails.
 * This happens when requesting licenses, but no more licenses are available.
 */
exception LicenseError { };

/** Triggered for newer operations instead of OpNotSucceeded.
 * Extra information is passed: 
 * - 2 bytes: big endian error category (general = 0x0000).
 * - rest: 0-terminated string with explanation 
 * Remark 1: for invalid input, the InvalidInput exception should be thrown
 * Remark 2: in DCM the buffer size is limited to 200 byte
 *
 * @version release 8.7
 */
exception OperationFailed { sequence<octet> Info; };


};
/// @} end of except
#endif
